using UnityEngine;
using System.Collections.Generic;


/* ============================================================================================
 * The NPC Core Script
 * -------------------
 * The main purpose of this script is to define an NPC. It contains demographic info like the 
 * ID, the name, and the faction. It also tracks the current and last sector the NPC visited
 * 
 * The script also handles TRIGGER ACTIONS. NPCs need to respond to various trigger actions such
 * as entering the trigger spheres of jumpgates or stations. Each NPC is in charge of handling
 * its own actions in regards to the type of trigger it has entered, and is also in charge of
 * handling the actions needed when it moves outside of a trigger.
 * 
 * Three main actions that this script handles are DOCKING JUMPING. 
 * * Docking: Add the NPC to the NPCControl.DockedNPCList() collection and set itself inactive.
 * * Jumping: Resets the movement plan and inactivates itself.
 * Undocking is a global process handled on the NPCController
 * =============================================================================================
 * Updates:
 *  8/7/15: Consolidation and refactoring to move trigger functionality from several other 
 *      scripts into this one so we have one single point to handle actions.
 * =============================================================================================
 */
public class NPC : MonoBehaviour
{
    #region Inspector Variables

    //Defines the NPC type GameObject
    public enum NPCTYPE
    {
        Merchant,
        Pirate,
        Police,
        Miner
    }

    //Public setter for the type
    public NPCTYPE NPCType;

    //Data elements taken from the data controller
    //  or generated by object pool population
    [Header("NPC Demographics")]
    public int NPCID;
    public string NPCName;
    public string NPCShipName;
    public string NPCFaction;

    //Sector tracking. LastSector is only good when/if
    //  persistant NPCs are implemented.
    [Header("Sector Tracking")]
    public int currentSector = 0;
    public int lastSector = 0;

    #endregion

}

/* ============================================================================================
 * MERCHANT NPC
 * ------------
 * Definition of a merchant NPC. These guys get special consideration because they will be moving
 * throughout the game as singular, named objects. 
 ============================================================================================*/
public class MerchantNPC: MonoBehaviour
{
    public int MerchantID;                                      //Unique ID
    public string FirstName;                                    //NPC's first name (or only name)
    public string LastName;                                     //NPC's last name (or blank)

    //Once a route has been determined
    public int StartingSectorID;                                //Where the route was calc'd
    public int CurrentSectorID;                                 //Where the NPC is at any given time
    public int DestinationSectorID;                             //Where the NPC is headed

    //Leaving, docked, or arriving at station
    public int StartingStationID;                               //Where the NPC was when the route was calc'd   
    public int CurrentStationID;                                //Where the NPC is currently docked (0 if not)
    public int DestinationStationID;                             //Station the NPC is heading for (determines DestinationSectorID)

    public int DestinationJumpgateID;                           //Next JG that the NPC is headed for

    public List<int> CurrentRoute;                              //Entire route from StartingSectorID to DestinationSectorID

    public int TickIntervalInSeconds;                           //Interval between ticks, in seconds
    public System.DateTime LastActionTick;                      //Last time the tick was counted
    public bool SuspendTickForPlayer;                           //When in the same sector as the player, suspend all tick checks

    public int NPCWallet;                                       //NPC's current bankroll

    public List<CommodityInventoryDataObject> CurrentCargo;     //NPC's current cargo inventory

    
}